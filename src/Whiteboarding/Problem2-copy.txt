/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/


input: 4,000,000
output: 2 + 8 + 34 .... n 
output is an int!!!
 
//MUST SET currentNum to 1 in order to start on the 'next' num.
const function Fibonacci(priorNum = 0, currentNum = 1, limit = 4^9, sum = 0, sumEven = 0) {

    if (currentNum > 0){
            sum = priorNum + currentNum; //adding the previous two
        };

    else if (currentNum % 2 === 0 < limit ) //sum of the even-valued terms
    {
        sumEven += currentNum; 
    } 
    //MUST CALL FX Fibonacci.  ELSE, only first num is returned 0+1; AND have a RETURN
}   


//

*/
const fib = (n, a = 0, b = 1) => {
  if (0 < n) {
    fib(--n, b, a + b);
  } else {
    a;
  }
};

    

