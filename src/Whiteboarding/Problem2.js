/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/

//this number = x and the next = y; x + y = FS
// FS<=4M
// evens only

const fibonacci = (currentNumber, priorSum = 0) => {
  // let currentNumber=1;
  // let priorSum=1;
  let thisLimit; //the limit up to which currentNumber has been counted.
  const numberLimit = 4; //4*10^9;

  if (currentNumber == 1) {
    priorSum = currentNumber + (currentNumber + 1);
    return priorSum;
  } else if (currentNumber > 1) {
    thisLimit = priorSum + currentNumber;
  } //else if (cur){}
};

fibonacci(10);

a + b = c((a = c)) + b;

const fib = (n, a = 0, b = 1) => {
  if (0 < n) {
    fib(--n, b, a + b);
  } else {
    a;
  }
};

const result = fib(100);

////////////DON'T LOOK BELOW THIS LINE//////////////
const fibonacci = (number) => {
  if (number <= 1) {
    console.log("SUM: " + number);
    return number;
  }
  console.log(number);
  return fibonacci(number - 1) + fibonacci(number - 2);
};

fibonacci(4);

//////////////// Object Oriented Approach /////////////////////
function fiboEvenSum(n) {
  // setup placeholders for our three values
  let fibNumSum = 0; // product of our two numbers
  let fibCurrent = 0; // current number
  let fibNext = 1; // next number
  for (let i = 1; i <= n; i++) {
    // find next number
    let fibTotal = fibCurrent + fibNext;
    // set first number to second number
    fibCurrent = fibNext;
    // set second number to total
    fibNext = fibTotal;
    // make sure the value is even
    if (fibTotal % 2 == 0) {
      fibNumSum += fibTotal;
    }
  }
  // You can do it!
  return fibNumSum;
}
fiboEvenSum(10); //44
